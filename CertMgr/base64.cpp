#include "base64.h"

static const uint8_t encode_table[] = {
	'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'+', '/'
};

static const uint8_t decode_table[] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff,
	0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0xff, 0xff, 0xff, 0x3f,
	0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0xff, 0xff,
	0xff, 0xfe, 0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
	0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12,
	0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24,
	0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
	0x31, 0x32, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff
};

static uint8_t bitmov(uint8_t src, uint32_t lnum, uint32_t rnum) {
	src <<= lnum; // src = src << lnum;
	src >>= rnum; // src = src >> rnum;
	return src;
}

size_t base64_encode_calc_buffer(size_t data_bytes)
{
	return ((data_bytes / 3) + 1) * 4;
}

size_t base64_decode_calc_buffer(size_t data_bytes)
{
	if ((data_bytes % 4) != 0) return size_t(-1);
	return (data_bytes / 4) * 3;
}

size_t base64_encode(const void* src_data, size_t src_bytes, void* dst_buffer, size_t dst_bytes)
{
	if (dst_bytes < base64_encode_calc_buffer(src_bytes)) return size_t(-1);
	const uint8_t* srcdat = (uint8_t*)src_data;
	uint8_t* dstdat = (uint8_t*)dst_buffer;
	if (srcdat == nullptr || dstdat == nullptr) return size_t(-1);
	int srclen = 0;
	int needfill = 0;
	if (src_bytes % 3 != 0) needfill = 3 - src_bytes % 3;
	srclen = src_bytes + needfill;
	size_t dstlen = static_cast<size_t>(srclen) * 8 / 6;
	uint8_t* p = dstdat;
	for (int i = 0; i < srclen; i += 3) {
		int value = *srcdat >> 2;
		char c = encode_table[value];
		*p = c;
		if (i == src_bytes + needfill - 3 && needfill != 0) {
			if (needfill == 1) {
				*(p + 1) = encode_table[(int)(bitmov(*srcdat, 6, 2) + bitmov(*(srcdat + 1), 0, 4))];
				*(p + 2) = encode_table[(int)bitmov(*(srcdat + 1), 4, 2)];
				*(p + 3) = '=';
			}
			else if (needfill == 2) {
				*(p + 1) = encode_table[(int)bitmov(*srcdat, 6, 2)];
				*(p + 2) = '=';
				*(p + 3) = '=';
			}
		}
		else {
			*(p + 1) = encode_table[bitmov(*srcdat, 6, 2) + bitmov(*(srcdat + 1), 0, 4)];
			*(p + 2) = encode_table[bitmov(*(srcdat + 1), 4, 2) + bitmov(*(srcdat + 2), 0, 6)];
			*(p + 3) = encode_table[*(srcdat + 2) & 0x3f];
		}
		p += 4;
		srcdat += 3;
	}
	return size_t(dstlen);
}

size_t base64_decode(const void* src_data, size_t src_bytes, void* dst_buffer, size_t dst_bytes)
{
	if (dst_bytes < base64_decode_calc_buffer(src_bytes)) return size_t(-1);
	const uint8_t* srcdat = (uint8_t*)src_data;
	uint8_t* dstdat = (uint8_t*)dst_buffer;
	if (srcdat == nullptr || dstdat == nullptr) return size_t(-1);
	if (src_bytes % 4 != 0) return size_t(-1);
	int t = 0, x = 0, y = 0;
	size_t i = 0;
	uint8_t c = 0;
	int g = 3;
	while (srcdat[x] != 0) {
		c = decode_table[srcdat[x++]];
		if (c == 0xff) return size_t(-1);
		if (c == 0xfd) continue;
		if (c == 0xfe) { c = 0; g--; }
		t = (t << 6) | c;
		if (++y == 4) {
			dstdat[i++] = (unsigned char)((t >> 16) & 0xff);
			if (g > 1) dstdat[i++] = (unsigned char)((t >> 8) & 0xff);
			if (g > 2) dstdat[i++] = (unsigned char)(t & 0xff);
			y = t = 0;
		}
	}
	return size_t(i);
}
